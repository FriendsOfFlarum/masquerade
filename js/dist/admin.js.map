{"version":3,"sources":["webpack://@fof/masquerade/webpack/bootstrap","webpack://@fof/masquerade/external \"flarum.core.compat['app']\"","webpack://@fof/masquerade/external \"flarum.core.compat['Model']\"","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/masquerade/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/masquerade/external \"flarum.core.compat['extend']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/Button']\"","webpack://@fof/masquerade/external \"flarum.core.compat['utils/mixin']\"","webpack://@fof/masquerade/./src/lib/models/Field.js","webpack://@fof/masquerade/external \"flarum.core.compat['components/Select']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/masquerade/external \"flarum.core.compat['Component']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/AdminNav']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://@fof/masquerade/external \"flarum.core.compat['utils/saveSettings']\"","webpack://@fof/masquerade/./src/admin/components/SelectFieldOptionEditor.js","webpack://@fof/masquerade/./src/admin/panes/ProfileConfigurePane.js","webpack://@fof/masquerade/./src/admin/addProfileConfigurePane.js","webpack://@fof/masquerade/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","__webpack_exports__","Field","apiEndpoint","this","exists","data","id","mixin","Model","attribute","description","type","validation","required","prefix","icon","sort","deleted_at","transformDate","answer","hasOne","on_bio","SelectFieldOptionEditor","init","newOption","prop","view","_this","app","translator","trans","options","map","option","optionIndex","oninput","withAttr","updateOption","onclick","moveOption","deleteOption","onchange","placeholder","addOption","updateRules","props","join","rules","split","forEach","rule","parts","index","moveIndex","newIndex","length","move","splice","push","Component","ProfileConfigurePane","resetNew","loading","existing","loadExisting","enforceProfileCompletion","settings","disableUserBio","config","$","sortable","cancel","on","e","ui","sorting","updateSort","_this2","Switch","component","state","updateSetting","children","field","addField","onsubmit","submitAddField","setting","_saveSettings","saveSettings","_this3","data-id","Button","className","deleteField","toggleField","updateExistingFieldInput","a","href","target","Select","availableTypes","disabled","readyToAdd","updateExistingField","what","_field$pushAttributes","pushAttributes","request","method","url","forum","then","requestSuccess","parents","toggleClass","preventDefault","redraw","result","model","store","pushPayload","Array","remove","all","b","email","boolean","select","null","addProfileConfigurePane","routes","path","extensionSettings","route","extend","AdminNav","items","add","AdminLinkButton","initializers","models","PermissionGrid","label","permission","allowGuest"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['utils/mixin'];","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Field extends mixin(Model, {\n    name: Model.attribute('name'),\n    description: Model.attribute('description'),\n    type: Model.attribute('type'),\n    validation: Model.attribute('validation'),\n    required: Model.attribute('required'),\n    prefix: Model.attribute('prefix'),\n    icon: Model.attribute('icon'),\n    sort: Model.attribute('sort'),\n    deleted_at: Model.attribute('deleted_at', Model.transformDate),\n    answer: Model.hasOne('answer'),\n    on_bio: Model.attribute('on_bio')\n}) {\n    /**\n     * Construct a path to the API endpoint for this resource.\n     *\n     * @return {String}\n     * @protected\n     */\n    apiEndpoint() {\n        return '/masquerade/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['components/PermissionGrid'];","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport icon from 'flarum/helpers/icon';\n\n/* global m */\n\nexport default class SelectFieldOptionEditor extends Component {\n    init() {\n        this.newOption = m.prop('');\n    }\n\n    view() {\n        return m('.Form-group', [\n            m('label', app.translator.trans('fof-masquerade.admin.fields.options')),\n            m('table', m('tbody', this.options().map((option, optionIndex) => m('tr', [\n                m('td', m('input[type=text].FormControl', {\n                    oninput: m.withAttr('value', value => {\n                        this.updateOption(optionIndex, value);\n                    }),\n                    value: option,\n                })),\n                m('td', m('button.Button', {\n                    onclick: () => {\n                        this.moveOption(optionIndex, -1);\n                    },\n                }, icon('fas fa-chevron-up'))),\n                m('td', m('button.Button', {\n                    onclick: () => {\n                        this.moveOption(optionIndex, 1);\n                    },\n                }, icon('fas fa-chevron-down'))),\n                m('td', m('button.Button.Button--danger', {\n                    onclick: () => {\n                        this.deleteOption(optionIndex);\n                    },\n                }, icon('fas fa-close'))),\n            ])))),\n            m('.helpText', app.translator.trans('fof-masquerade.admin.fields.option-coma-warning')),\n            m('table', m('tbody'), m('tr', [\n                m('td', m('input[type=text].FormControl', {\n                    onchange: m.withAttr('value', this.newOption),\n                    value: this.newOption(),\n                    placeholder: app.translator.trans('fof-masquerade.admin.fields.option-new'),\n                })),\n                m('td', m('button.Button.Button--primary', {\n                    onclick: () => {\n                        this.addOption();\n                    },\n                }, icon('fas fa-plus'))),\n            ])),\n        ]);\n    }\n\n    updateRules(options) {\n        // We ignore other existing rules, they would probably be leftovers from another field type when changing types\n        this.props.onchange('in:' + options.join(','));\n    }\n\n    options() {\n        const rules = this.props.value.split('|');\n\n        let options = [];\n\n        rules.forEach(rule => {\n            const parts = rule.split(':', 2);\n\n            if (parts[0] === 'in') {\n                options = parts[1].split(',');\n            }\n        });\n\n        return options;\n    }\n\n    updateOption(index, value) {\n        let options = this.options();\n\n        options[index] = value;\n\n        this.updateRules(options);\n    }\n\n    moveOption(index, moveIndex) {\n        let options = this.options();\n\n        const newIndex = index + moveIndex;\n\n        if (newIndex < 0 || newIndex > options.length - 1) {\n            return;\n        }\n\n        const move = options.splice(index, 1);\n\n        options.splice(newIndex, 0, move[0]);\n\n        this.updateRules(options);\n    }\n\n    deleteOption(index) {\n        let options = this.options();\n\n        options.splice(index, 1);\n\n        this.updateRules(options);\n    }\n\n    addOption() {\n        if (this.newOption() === '') {\n            return;\n        }\n\n        let options = this.options();\n\n        options.push(this.newOption());\n\n        this.newOption('');\n\n        this.updateRules(options);\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport Button from 'flarum/components/Button';\nimport saveSettings from 'flarum/utils/saveSettings';\nimport SelectFieldOptionEditor from '../components/SelectFieldOptionEditor';\n\n/* global m */\n\nexport default class ProfileConfigurePane extends Component {\n\n    /**\n     * Sets up the component.\n     */\n    init() {\n        this.resetNew();\n        this.loading = false;\n        this.existing = [];\n        this.loadExisting();\n        this.enforceProfileCompletion = m.prop(app.data.settings['masquerade.force-profile-completion'] == 1);\n        this.disableUserBio = m.prop(app.data.settings['masquerade.disable-user-bio'] == 1);\n    }\n\n    /**\n     * Configures the component.\n     */\n    config() {\n        this.$('.js-sortable-fields')\n            .sortable({\n                cancel: '',\n            })\n            .on('sortupdate', (e, ui) => {\n                const sorting = this.$('.js-sortable-fields > .Field')\n                    .map(function () {\n                        return $(this).data('id');\n                    })\n                    .get();\n\n                this.updateSort(sorting);\n            });\n    }\n\n    /**\n     * Generates the component view.\n     *\n     * @returns {*}\n     */\n    view() {\n        return m('.ProfileConfigurePane', m('.container', [\n            m('h1', app.translator.trans('fof-masquerade.admin.title')),\n            m('h2', app.translator.trans('fof-masquerade.admin.general-options')),\n            m('form', [\n                m('.Form-group', Switch.component({\n                    state: this.enforceProfileCompletion(),\n                    onchange: this.updateSetting.bind(this, this.enforceProfileCompletion, 'masquerade.force-profile-completion'),\n                    children: app.translator.trans('fof-masquerade.admin.fields.force-user-to-completion'),\n                })),\n                m('.Form-group', Switch.component({\n                    state: this.disableUserBio(),\n                    onchange: this.updateSetting.bind(this, this.disableUserBio, 'masquerade.disable-user-bio'),\n                    children: app.translator.trans('fof-masquerade.admin.fields.disable-user-bio'),\n                })),\n            ]),\n            m('h2', app.translator.trans('fof-masquerade.admin.fields.title')),\n            m('form.js-sortable-fields', this.existing.map(field => {\n                // Build array of fields to show.\n                return this.addField(field);\n            })),\n            m('form', {\n                onsubmit: this.submitAddField.bind(this),\n            }, [\n                this.addField(this.new),\n            ]),\n        ]));\n    }\n\n    /**\n     * Updates setting in database.\n     * @param prop\n     * @param setting\n     * @param value\n     */\n    updateSetting(prop, setting, value) {\n        saveSettings({\n            [setting]: value,\n        });\n\n        prop(value);\n    }\n\n    /**\n     * Creates a field in the DOM.\n     *\n     * @param field\n     * @returns {*}\n     */\n    addField(field) {\n        let exists = field.id();\n\n        return m('fieldset.Field', {\n            'data-id': field.id(),\n            key: field.id(),\n        }, [\n            m('legend', [\n                exists ? [Button.component({\n                    className: 'Button Button--icon Button--danger',\n                    icon: \"fas fa-trash\",\n                    onclick: this.deleteField.bind(this, field),\n                }), ' '] : null,\n                m('span.Field-toggle', {\n                    onclick: (e) => this.toggleField(e),\n                }, [\n                    app.translator.trans('fof-masquerade.admin.fields.' + (exists ? 'edit' : 'add'), {\n                        field: field.name(),\n                    }),\n                    ' ',\n                    icon('fas fa-caret-down'),\n                ]),\n            ]),\n            m('.Field-body', [\n                m('.Form-group', [\n                    m('label', app.translator.trans('fof-masquerade.admin.fields.name')),\n                    m('input.FormControl', {\n                        value: field.name(),\n                        oninput: m.withAttr('value', this.updateExistingFieldInput.bind(this, 'name', field)),\n                    }),\n                    m('span.helpText', app.translator.trans('fof-masquerade.admin.fields.name-help')),\n                ]),\n                m('.Form-group', [\n                    m('label', app.translator.trans('fof-masquerade.admin.fields.description')),\n                    m('input.FormControl', {\n                        value: field.description(),\n                        oninput: m.withAttr('value', this.updateExistingFieldInput.bind(this, 'description', field)),\n                    }),\n                    m('span.helpText', app.translator.trans('fof-masquerade.admin.fields.description-help')),\n                ]),\n                m('.Form-group', [\n                    m('label', app.translator.trans('fof-masquerade.admin.fields.icon')),\n                    m('input.FormControl', {\n                        value: field.icon(),\n                        oninput: m.withAttr('value', this.updateExistingFieldInput.bind(this, 'icon', field)),\n                    }),\n                    m('span.helpText', app.translator.trans('fof-masquerade.admin.fields.icon-help', {\n                        a: <a href=\"https://fontawesome.com/icons?m=free\" target=\"_blank\"/>,\n                    })),\n                ]),\n                m('.Form-group', Switch.component({\n                    state: field.on_bio(),\n                    onchange: this.updateExistingFieldInput.bind(this, 'on_bio', field),\n                    children: app.translator.trans('fof-masquerade.admin.fields.on_bio'),\n                })),\n                m('.Form-group', Switch.component({\n                    state: field.required(),\n                    onchange: this.updateExistingFieldInput.bind(this, 'required', field),\n                    children: app.translator.trans('fof-masquerade.admin.fields.required'),\n                })),\n                m('.Form-group', [\n                    m('label', app.translator.trans('fof-masquerade.admin.fields.type')),\n                    Select.component({\n                        onchange: value => {\n                            if (value === 'null') {\n                                value = null;\n                            }\n\n                            this.updateExistingFieldInput('type', field, value);\n                        },\n                        options: this.availableTypes(),\n                        value: field.type(),\n                    }),\n                ]),\n                (field.type() === 'select' ? SelectFieldOptionEditor.component({\n                    onchange: value => {\n                        this.updateExistingFieldInput('validation', field, value);\n                    },\n                    value: field.validation(),\n                }) : null),\n                (field.type() === null ? m('.Form-group', [\n                    m('label', app.translator.trans('fof-masquerade.admin.fields.validation')),\n                    m('input.FormControl', {\n                        value: field.validation(),\n                        oninput: m.withAttr('value', this.updateExistingFieldInput.bind(this, 'validation', field)),\n                    }),\n                    m('span.helpText', app.translator.trans('fof-masquerade.admin.fields.validation-help', {\n                        a: <a href=\"https://laravel.com/docs/5.2/validation#available-validation-rules\"\n                              target=\"_blank\"/>,\n                    })),\n                ]) : null),\n                m('.Form-group', m('.ButtonGroup', [\n                    Button.component({\n                        type: 'submit',\n                        className: 'Button Button--primary',\n                        children: app.translator.trans('fof-masquerade.admin.buttons.' + (exists ? 'edit' : 'add') + '-field'),\n                        loading: this.loading,\n                        disabled: !this.readyToAdd(field),\n                        onclick: this.updateExistingField.bind(this, field)\n                    }),\n                    (exists ? Button.component({\n                        type: 'submit',\n                        className: 'Button Button--danger',\n                        children: app.translator.trans('fof-masquerade.admin.buttons.delete-field'),\n                        loading: this.loading,\n                        onclick: this.deleteField.bind(this, field),\n                    }) : null),\n                ])),\n            ]),\n        ]);\n    }\n\n    updateExistingFieldInput(what, field, value) {\n        let exists = field.id();\n\n        if (exists) {\n            field.pushAttributes({\n                [what]: value\n            })\n        } else {\n            field[what](value);\n        }\n    }\n\n    /**\n     * Sorts the fields.\n     *\n     * @param {Array} sorting\n     */\n    updateSort(sorting) {\n        let data = {\n            sort: sorting\n        };\n\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + '/masquerade/fields/order',\n            data\n        }).then(\n            this.requestSuccess.bind(this)\n        );\n    }\n\n    /**\n     * Opens and closes field configuration sets.\n     *\n     * @param e\n     */\n    toggleField(e) {\n        $(e.target).parents('.Field').toggleClass('active');\n    }\n\n    /**\n     * Deletes a field configuration set.\n     *\n     * @param field\n     */\n    deleteField(field) {\n        app.request({\n            method: 'DELETE',\n            url: app.forum.attribute('apiUrl') + '/masquerade/fields/' + field.id(),\n        }).then(\n            this.requestSuccess.bind(this)\n        );\n    }\n\n    /**\n     * Saves the settings to the database and redraw the page\n     *\n     * @param e\n     */\n    submitAddField(e) {\n        e.preventDefault();\n\n        let data = this.new;\n\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + '/masquerade/fields',\n            data,\n        }).then(\n            this.requestSuccess.bind(this)\n        );\n\n        this.resetNew();\n\n        m.redraw();\n    }\n\n    /**\n     * Updates the value of one field.\n     *\n     * @param field\n     */\n    updateExistingField(field) {\n        if (!field.id()) return;\n\n        let data = field.data;\n\n        app.request({\n            // We use PATCH and not PUT because the endpoint allows filling only some of the fields\n            // (even if here we always pass all the attributes)\n            method: 'PATCH',\n            url: app.forum.attribute('apiUrl') + '/masquerade/fields/' + field.id(),\n            data,\n        }).then(\n            this.requestSuccess.bind(this)\n        );\n    }\n\n    /**\n     * Parses result to update DOM.\n     *\n     * @param result\n     */\n    requestSuccess(result) {\n        let model = app.store.pushPayload(result);\n\n        // In case we've updated/deleted one instance delete it if necessary.\n        if (!(model instanceof Array) && model.deleted_at()) {\n            app.store.remove(model);\n        }\n\n        this.existing = app.store.all('masquerade-field');\n\n        // Update order in case the store order doesn't reflect the true ordering\n        this.existing.sort((a, b) => {\n            if (a.sort() < b.sort()) return -1;\n            if (a.sort() > b.sort()) return 1;\n            return 0;\n        });\n\n        this.loading = false;\n        m.redraw()\n    }\n\n    /**\n     * Retrieves list of fields.\n     */\n    loadExisting() {\n        this.loading = true;\n\n        return app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/masquerade/fields',\n        }).then(\n            this.requestSuccess.bind(this)\n        );\n    }\n\n    /**\n     * Resets the new field.\n     */\n    resetNew() {\n        this.new = {\n            // id() does not hold any value, but it's necessary to keep it because it's called to make the difference\n            // between the simple object holding the new field's value and the model holding an existing field's value\n            'id': m.prop(),\n            'name': m.prop(''),\n            'description': m.prop(''),\n            'prefix': m.prop(''),\n            'icon': m.prop(''),\n            'required': m.prop(false),\n            'on_bio': m.prop(false),\n            'type': m.prop(null),\n            'validation': m.prop(''),\n        };\n    }\n\n    /**\n     * Checks whether creation field is completed.\n     *\n     * @returns boolean\n     */\n    readyToAdd(field) {\n        if (field.name()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * List of field types availables\n     * @returns {Array}\n     */\n    availableTypes() {\n        return {\n            url: app.translator.trans('fof-masquerade.admin.types.url'),\n            email: app.translator.trans('fof-masquerade.admin.types.email'),\n            boolean: app.translator.trans('fof-masquerade.admin.types.boolean'),\n            select: app.translator.trans('fof-masquerade.admin.types.select'),\n            null: app.translator.trans('fof-masquerade.admin.types.advanced'),\n        };\n    }\n}\n","import {extend} from \"flarum/extend\";\nimport AdminNav from \"flarum/components/AdminNav\";\nimport AdminLinkButton from \"flarum/components/AdminLinkButton\";\nimport ProfileConfigurePane from './panes/ProfileConfigurePane';\n\nexport default function () {\n    // create the route\n    app.routes['fof-masquerade-configure-profile'] = {path: '/fof/masquerade/configure', component: ProfileConfigurePane.component()};\n\n    // bind the route we created to the three dots settings button\n    app.extensionSettings['fof-masquerade'] = () => m.route(app.route('fof-masquerade-configure-profile'));\n\n    extend(AdminNav.prototype, 'items', items => {\n        // add the Image Upload tab to the admin navigation menu\n        items.add('fof-masquerade-configure-profile', AdminLinkButton.component({\n            href: app.route('fof-masquerade-configure-profile'),\n            icon: 'far fa-id-card',\n            children: 'Masquerade',\n            description: app.translator.trans('fof-masquerade.admin.menu.description')\n        }));\n    });\n}\n","import {extend} from \"flarum/extend\";\nimport app from \"flarum/app\";\nimport PermissionGrid from \"flarum/components/PermissionGrid\";\nimport Field from \"./../lib/models/Field\";\nimport addProfileConfigurePane from './addProfileConfigurePane';\n\napp.initializers.add('fof-masquerade', app => {\n    app.store.models['masquerade-field'] = Field;\n\n    // add the permission option for viewing a masquerade profile\n    extend(PermissionGrid.prototype, 'viewItems', items => {\n        items.add('masquerade-view-profile', {\n            icon: 'far fa-id-card',\n            label: app.translator.trans('fof-masquerade.admin.permissions.view-profile'),\n            permission: 'fof.masquerade.view-profile',\n            allowGuest: true\n        });\n    });\n    // add the permission option for creating a masquerade profile\n    extend(PermissionGrid.prototype, 'startItems', items => {\n        items.add('masquerade-have-profile', {\n            icon: 'far fa-id-card',\n            label: app.translator.trans('fof-masquerade.admin.permissions.have-profile'),\n            permission: 'fof.masquerade.have-profile'\n        });\n    });\n\n    addProfileConfigurePane();\n});\n"],"sourceRoot":""}