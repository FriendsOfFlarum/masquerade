{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@fof/masquerade/webpack/bootstrap","webpack://@fof/masquerade/webpack/runtime/compat get default export","webpack://@fof/masquerade/webpack/runtime/define property getters","webpack://@fof/masquerade/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/masquerade/webpack/runtime/make namespace object","webpack://@fof/masquerade/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/models/User']\"","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/masquerade/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/masquerade/./src/lib/models/Field.js","webpack://@fof/masquerade/external root \"flarum.core.compat['common/app']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@fof/masquerade/./src/lib/models/Answer.ts","webpack://@fof/masquerade/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['forum/components/UserPage']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/Component']\"","webpack://@fof/masquerade/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@fof/masquerade/./src/forum/types/BaseField.js","webpack://@fof/masquerade/./src/forum/types/BooleanField.js","webpack://@fof/masquerade/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/masquerade/./src/forum/types/EmailField.js","webpack://@fof/masquerade/external root \"flarum.core.compat['common/components/Select']\"","webpack://@fof/masquerade/./src/forum/types/SelectField.js","webpack://@fof/masquerade/./src/forum/types/UrlField.js","webpack://@fof/masquerade/./src/forum/types/TypeFactory.js","webpack://@fof/masquerade/./src/forum/panes/ProfilePane.tsx","webpack://@fof/masquerade/external root \"flarum.core.compat['common/components/Link']\"","webpack://@fof/masquerade/./src/forum/panes/ProfileConfigurePane.js","webpack://@fof/masquerade/./src/forum/panes/RootMasqueradePane.tsx","webpack://@fof/masquerade/external root \"flarum.core.compat['forum/components/UserCard']\"","webpack://@fof/masquerade/./src/forum/index.js","webpack://@fof/masquerade/./src/forum/addProfilePane.js","webpack://@fof/masquerade/./src/forum/mutateUserHero.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\n\nexport default class Field extends Model {\n  name = Model.attribute('name');\n  description = Model.attribute('description');\n  type = Model.attribute('type');\n  validation = Model.attribute('validation');\n  required = Model.attribute('required');\n  prefix = Model.attribute('prefix');\n  icon = Model.attribute('icon');\n  sort = Model.attribute('sort');\n  deleted_at = Model.attribute('deleted_at', Model.transformDate);\n  answer = Model.hasOne('answer');\n  on_bio = Model.attribute('on_bio');\n\n  apiEndpoint() {\n    return '/masquerade/fields' + (this.exists ? '/' + this.data.id : '');\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import app from 'flarum/common/app';\nimport Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\n\nimport type Field from './Field';\n\nexport default class Answer extends Model {\n  content = Model.attribute('content');\n  fieldId = Model.attribute('fieldId');\n  field = computed<Field>('fieldId', (fieldId: string) => {\n    return app.store.getById('masquerade-field', fieldId);\n  });\n  userId = Model.attribute('user_id');\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","import icon from 'flarum/common/helpers/icon';\n\n/* global m */\n\nexport default class BaseField {\n  constructor({ field, set, value }) {\n    this.field = field;\n    this.set = set;\n    this.value = value;\n  }\n\n  readAttribute(object, attribute) {\n    if (typeof object[attribute] === 'function') {\n      return object[attribute]();\n    }\n\n    return object[attribute];\n  }\n\n  /**\n   * Gets all Laravel validation rules split by rule\n   * @returns {Array}\n   */\n  validationRules() {\n    return this.readAttribute(this.field, 'validation').split('|');\n  }\n\n  /**\n   * Gets a Laravel validation rule by name\n   * @param {string} ruleName\n   * @returns {string|null}\n   */\n  validationRule(ruleName) {\n    let ruleContent = null;\n\n    this.validationRules().forEach((rule) => {\n      const split = rule.split(':', 2);\n\n      if (split[0] === ruleName) {\n        ruleContent = split[1];\n      }\n    });\n\n    return ruleContent;\n  }\n\n  editorField() {\n    return (\n      <div class=\"Form-group Field\">\n        <label>\n          {this.field.icon() ? [icon(this.field.icon()), ' '] : null} {this.field.name()} {this.field.required() ? '*' : null}\n        </label>\n\n        <div class=\"FormField\">\n          {this.field.prefix() ? m('.prefix', this.field.prefix()) : null}\n          {this.editorInput()}\n          {this.field.description() ? <div class=\"helpText\">{this.field.description()}</div> : null}\n        </div>\n      </div>\n    );\n  }\n\n  editorInput() {\n    return <input {...this.editorInputAttrs()} />;\n  }\n\n  editorInputAttrs() {\n    return {\n      className: 'FormControl',\n      oninput: (event) => {\n        this.set(event.target.value);\n      },\n      value: this.value,\n      required: this.field.required(),\n    };\n  }\n\n  answerField() {\n    const iconName = this.readAttribute(this.field, 'icon');\n\n    return (\n      <div className={`Masquerade-Bio-Set${this.hasAnswer() ? '' : ' Masquerade-Bio-Set--empty'}`}>\n        <span class=\"Masquerade-Bio-Field\">\n          {iconName && <>{icon(iconName)} </>}\n          {this.readAttribute(this.field, 'name')}:{' '}\n        </span>\n        <span class=\"Masquerade-Bio-Answer\">{this.answerContent()}</span>\n      </div>\n    );\n  }\n\n  answerContent() {\n    return this.value;\n  }\n\n  hasAnswer() {\n    const answerContent = this.answerContent();\n\n    if (answerContent === null) {\n      return false;\n    }\n\n    if (typeof answerContent === 'object') {\n      return !!Object.keys(answerContent).length;\n    }\n\n    return !!answerContent?.length;\n  }\n\n  static isNoOptionSelectedValue(value) {\n    // The value can be null when coming from the API\n    // The value can be '' when the field does not exist on the user (the empty string is set in ProfileConfigurePane)\n    return value === null || value === '';\n  }\n}\n","import icon from 'flarum/common/helpers/icon';\nimport BaseField from './BaseField';\n\nexport default class BooleanField extends BaseField {\n  editorInput() {\n    return this.options().map((option) =>\n      m(\n        'div',\n        m('label', [\n          m('input[type=radio]', {\n            checked: option.selected(this.value),\n            onclick: () => {\n              this.set(option.key);\n            },\n          }),\n          ' ' + option.label,\n        ])\n      )\n    );\n  }\n\n  options() {\n    let options = [];\n\n    if (!this.readAttribute(this.field, 'required')) {\n      options.push({\n        selected: (value) => BaseField.isNoOptionSelectedValue(value),\n        key: null,\n        label: app.translator.trans('fof-masquerade.forum.fields.select.none-optional'),\n      });\n    }\n\n    options.push({\n      selected: (value) => ['true', '1', 1, true, 'yes'].indexOf(value) !== -1,\n      key: 'true',\n      label: app.translator.trans('fof-masquerade.forum.fields.boolean.yes'),\n    });\n\n    options.push({\n      selected: (value) => ['false', '0', 0, false, 'no'].indexOf(value) !== -1,\n      key: 'false',\n      label: app.translator.trans('fof-masquerade.forum.fields.boolean.no'),\n    });\n\n    // This is probably overkill because it looks like the backend casts the value anyway\n    if (!BaseField.isNoOptionSelectedValue(this.value) && ['true', '1', 1, true, 'yes', 'false', '0', 0, false, 'no'].indexOf(this.value) === -1) {\n      options.push({\n        selected: () => true,\n        key: this.value,\n        label: '(invalid) ' + this.value,\n      });\n    }\n\n    return options;\n  }\n\n  answerContent() {\n    if (BaseField.isNoOptionSelectedValue(this.value)) {\n      return '';\n    }\n\n    return [1, '1', true, 'true', 'yes'].indexOf(this.value) !== -1\n      ? [icon('far fa-check-square'), ' ', app.translator.trans('fof-masquerade.forum.fields.boolean.yes')]\n      : [icon('far fa-square'), ' ', app.translator.trans('fof-masquerade.forum.fields.boolean.no')];\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import Button from 'flarum/common/components/Button';\nimport BaseField from './BaseField';\n\nexport default class EmailField extends BaseField {\n  editorInputAttrs() {\n    let attrs = super.editorInputAttrs();\n\n    attrs.type = 'email';\n    attrs.placeholder = 'you@example.com';\n\n    return attrs;\n  }\n\n  answerContent() {\n    const value = this.value;\n\n    if (!value) {\n      return null;\n    }\n\n    const email = value\n      .split(/@|\\./)\n      .map((segment) => {\n        return segment.replace(/(.{2})./g, '$1*');\n      })\n      .join('*');\n\n    return Button.component(\n      {\n        onclick: () => this.mailTo(),\n        className: 'Button Button--text',\n        icon: 'far fa-envelope',\n      },\n      email\n    );\n  }\n\n  mailTo() {\n    window.location = 'mailto:' + this.value;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","import app from 'flarum/forum/app';\nimport Select from 'flarum/common/components/Select';\nimport BaseField from './BaseField';\n\nconst NO_OPTION_SELECTED_KEY = 'fof_masquerade_no_option_selected';\n\nexport default class SelectField extends BaseField {\n  editorInput() {\n    return Select.component({\n      onchange: (value) => {\n        if (value === NO_OPTION_SELECTED_KEY) {\n          value = '';\n        }\n\n        this.set(value);\n      },\n      value: BaseField.isNoOptionSelectedValue(this.value) ? NO_OPTION_SELECTED_KEY : this.value,\n      options: this.options(),\n    });\n  }\n\n  options() {\n    let options = {};\n\n    if (!this.readAttribute(this.field, 'required')) {\n      options[NO_OPTION_SELECTED_KEY] = app.translator.trans('fof-masquerade.forum.fields.select.none-optional');\n    } else if (BaseField.isNoOptionSelectedValue(this.value)) {\n      options[NO_OPTION_SELECTED_KEY] = app.translator.trans('fof-masquerade.forum.fields.select.none-required');\n    }\n\n    const validationIn = this.validationRule('in');\n\n    if (validationIn) {\n      validationIn.split(',').forEach((value) => {\n        options[value] = value;\n      });\n    }\n\n    if (!BaseField.isNoOptionSelectedValue(this.value) && typeof options[this.value] === 'undefined') {\n      options[this.value] = '(invalid) ' + this.value;\n    }\n\n    return options;\n  }\n}\n","import Button from 'flarum/common/components/Button';\nimport BaseField from './BaseField';\n\nexport default class UrlField extends BaseField {\n  editorInputAttrs() {\n    let attrs = super.editorInputAttrs();\n\n    attrs.type = 'url';\n    attrs.placeholder = 'https://example.com';\n\n    return attrs;\n  }\n\n  answerContent() {\n    const value = this.value;\n\n    if (!value) {\n      return null;\n    }\n\n    return Button.component(\n      {\n        onclick: () => this.to(),\n        className: 'Button Button--text',\n        icon: 'fas fa-link',\n      },\n      value.replace(/^https?:\\/\\//, '')\n    );\n  }\n\n  to() {\n    const popup = window.open();\n    popup.location = this.value;\n  }\n}\n","import BaseField from './BaseField';\nimport BooleanField from './BooleanField';\nimport EmailField from './EmailField';\nimport SelectField from './SelectField';\nimport UrlField from './UrlField';\n\nexport default class TypeFactory {\n  static typeForField({ field, set = undefined, value }) {\n    let className = BaseField;\n\n    const type = this.identify(field);\n\n    if (type) {\n      className = this.types()[type];\n    }\n\n    return new className({\n      field,\n      set,\n      value,\n    });\n  }\n\n  static fieldAttribute(field, attribute) {\n    if (typeof field[attribute] === 'function') {\n      return field[attribute]();\n    }\n\n    return field[attribute];\n  }\n\n  static types() {\n    return {\n      boolean: BooleanField,\n      email: EmailField,\n      select: SelectField,\n      url: UrlField,\n    };\n  }\n\n  /**\n   * Identifies how to parse the field answer.\n   * @returns {null|string}\n   */\n  static identify(field) {\n    const validation = (this.fieldAttribute(field, 'validation') || '').split(',');\n    let identified = null;\n\n    // If the field has a type we use it\n    const fieldType = this.fieldAttribute(field, 'type');\n    if (typeof this.types()[fieldType] !== 'undefined') {\n      return fieldType;\n    }\n\n    // If it's an advanced field with no type we then guess the best type\n    validation.forEach((rule) => {\n      rule = rule.trim();\n\n      if (typeof this.types()[rule] !== 'undefined') {\n        identified = rule;\n      }\n    });\n\n    return identified;\n  }\n}\n","import app from 'flarum/forum/app';\n\nimport Component from 'flarum/common/Component';\nimport TypeFactory from '../types/TypeFactory';\nimport type Answer from '../../lib/models/Answer';\nimport type Field from 'src/lib/models/Field';\nimport type User from 'flarum/common/models/User';\n\nexport default class ProfilePane extends Component {\n  answers!: Answer[];\n  user!: User;\n\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.loading = true;\n\n    this.answers = [];\n    this.user = this.attrs.user;\n\n    this.load(this.user);\n  }\n\n  view() {\n    return (\n      <div class=\"Masquerade-Bio\">\n        <div class=\"Fields\">\n          {app.store\n            .all('masquerade-field')\n            .sort((a, b) => a.sort() - b.sort())\n            .map((field) => {\n              const answer = this.answers.find((a) => a.field()?.id() === field.id());\n\n              return this.field(field, answer?.content() || '');\n            })}\n        </div>\n      </div>\n    );\n  }\n\n  field(field: Field, content) {\n    const type = TypeFactory.typeForField({\n      field,\n      value: content,\n    });\n\n    return type.answerField();\n  }\n\n  load() {\n    this.answers = this.user.masqueradeAnswers();\n\n    if (this.answers === false) {\n      this.answers = [];\n      app.store.find('users', this.user.id(), { include: 'masqueradeAnswers' }).then(() => {\n        this.answers = this.user.masqueradeAnswers();\n        m.redraw();\n      });\n    }\n\n    m.redraw();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","import app from 'flarum/forum/app';\n\nimport Button from 'flarum/common/components/Button';\nimport Link from 'flarum/common/components/Link';\nimport TypeFactory from '../types/TypeFactory';\nimport Component from 'flarum/common/Component';\n\nexport default class ProfileConfigurePane extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.loading = true;\n\n    this.enforceProfileCompletion = app.forum.attribute('masquerade.force-profile-completion') || false;\n    this.profileCompleted = app.forum.attribute('masquerade.profile-completed') || false;\n    this.profileNowCompleted = false; // Show \"after required\" text\n    this.answers = [];\n    this.answerValues = {};\n    this.user = this.attrs.user;\n    this.load();\n\n    // Show disabled state if everything is saved\n    // Unless the profile isn't complete, in which case show enabled button so it's obvious you will need to save\n    this.dirty = !this.profileCompleted;\n  }\n\n  view() {\n    return (\n      <form class=\"ProfileConfigurePane\" onsubmit={this.update.bind(this)}>\n        {!!(this.enforceProfileCompletion && !this.profileCompleted) && (\n          <div class=\"Alert Alert--Error\">{app.translator.trans('fof-masquerade.forum.alerts.profile-completion-required')}</div>\n        )}\n\n        <div class=\"Fields\">\n          {app.store\n            .all('masquerade-field')\n            .sort((a, b) => a.sort() - b.sort())\n            .map((field) => {\n              return this.field(field);\n            })}\n        </div>\n\n        <Button type=\"submit\" className=\"Button Button--primary\" loading={this.loading} disabled={!this.dirty}>\n          {app.translator.trans('fof-masquerade.forum.buttons.save-profile')}\n        </Button>\n\n        {!!this.profileNowCompleted && (\n          <span class=\"Masquerade-NowCompleted\">\n            {app.translator.trans('fof-masquerade.forum.alerts.profile-completed', {\n              a: <Link href={app.route('index')} />,\n            })}\n          </span>\n        )}\n      </form>\n    );\n  }\n\n  field(field) {\n    const type = TypeFactory.typeForField({\n      field,\n      set: this.set.bind(this, field),\n      value: this.answerValues[field.id()],\n    });\n\n    return type.editorField();\n  }\n\n  load() {\n    this.answers = this.user.masqueradeAnswers();\n\n    if (this.answers === false) {\n      this.answers = [];\n      app.store.find('users', this.user.id(), { include: 'masqueradeAnswers' }).then(() => {\n        this.answers = this.user.masqueradeAnswers();\n        this.answerValues = {};\n\n        app.store.all('masquerade-field').forEach((field) => {\n          const answer = this.answers.find((a) => a.field()?.id() === field.id());\n\n          this.answerValues[field.id()] = answer ? answer.content() : '';\n        });\n\n        this.loading = false;\n        m.redraw();\n      });\n    } else {\n      this.loading = false;\n\n      app.store.all('masquerade-field').forEach((field) => {\n        const answer = this.answers.find((a) => a.field()?.id() === field.id());\n\n        this.answerValues[field.id()] = answer ? answer.content() : '';\n      });\n    }\n\n    m.redraw();\n  }\n\n  set(field, value) {\n    this.answerValues[field.id()] = value;\n    this.dirty = true;\n  }\n\n  update(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    app\n      .request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/masquerade/configure/' + this.user.id(),\n        body: this.answerValues,\n      })\n      .then((response) => {\n        this.dirty = false;\n\n        if (!this.profileCompleted) {\n          this.profileCompleted = true;\n          this.profileNowCompleted = true;\n        }\n\n        this.parseResponse(response);\n      })\n      .catch(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n\n  parseResponse(response) {\n    console.log(response);\n    this.answers = app.store.pushPayload(response);\n    this.loading = false;\n    m.redraw();\n  }\n}\n","import UserPage from 'flarum/forum/components/UserPage';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport ProfilePane from './ProfilePane';\nimport ProfileConfigurePane from './ProfileConfigurePane';\n\nexport default class RootMasqueradePane extends UserPage {\n  loading = true;\n\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loadUser(m.route.param('username'));\n  }\n\n  pageContentComponent() {\n    if (!this.user) return null;\n\n    if (this.user.canEditMasqueradeProfile()) return <ProfileConfigurePane user={this.user} />;\n    else return <ProfilePane user={this.user} />;\n  }\n\n  show(user) {\n    super.show(user);\n\n    this.loading = false;\n    m.redraw();\n  }\n\n  content() {\n    return (\n      <div class=\"MasqueradeRoot\">\n        {this.loading && <LoadingIndicator />}\n        {this.pageContentComponent()}\n      </div>\n    );\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserCard'];","import app from 'flarum/forum/app';\nimport User from 'flarum/common/models/User';\nimport Field from './../lib/models/Field';\nimport Answer from './../lib/models/Answer';\nimport Model from 'flarum/common/Model';\n\nimport addProfilePane from './addProfilePane';\nimport mutateUserHero from './mutateUserHero';\n\n// Exports\nimport ProfileConfigurePane from './panes/ProfileConfigurePane';\nimport ProfilePane from './panes/ProfilePane';\nimport RootMasqueradePane from './panes/RootMasqueradePane';\nimport BaseField from './types/BaseField';\nimport BooleanField from './types/BooleanField';\nimport EmailField from './types/EmailField';\nimport SelectField from './types/SelectField';\nimport TypeFactory from './types/TypeFactory';\nimport UrlField from './types/UrlField';\n\napp.initializers.add('fof-masquerade', (app) => {\n  app.store.models['masquerade-field'] = Field;\n  app.store.models['masquerade-answer'] = Answer;\n\n  User.prototype.bioFields = Model.hasMany('bioFields');\n  User.prototype.masqueradeAnswers = Model.hasMany('masqueradeAnswers');\n  User.prototype.canEditMasqueradeProfile = Model.attribute('canEditMasqueradeProfile');\n\n  addProfilePane();\n\n  mutateUserHero();\n});\n\nconst components = {\n  ProfileConfigurePane,\n  ProfilePane,\n  RootMasqueradePane,\n};\n\nconst types = {\n  BaseField,\n  BooleanField,\n  EmailField,\n  SelectField,\n  TypeFactory,\n  UrlField,\n};\n\nexport { components, types };\n","import app from 'flarum/forum/app';\n\nimport { extend } from 'flarum/common/extend';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport RootMasqueradePane from './panes/RootMasqueradePane';\n\nexport default function addProfilePane() {\n  app.routes['fof-masquerade'] = {\n    path: '/u/:username/masquerade',\n    resolver: {\n      onmatch() {\n        if (!app.forum.attribute('canViewMasquerade')) throw new Error();\n\n        return RootMasqueradePane;\n      },\n    },\n  };\n\n  extend(UserPage.prototype, 'navItems', function (items) {\n    if (app.forum.attribute('canViewMasquerade') || this.user.canEditMasqueradeProfile()) {\n      const edit = this.user.canEditMasqueradeProfile();\n\n      items.add(\n        'masquerade',\n        LinkButton.component(\n          {\n            href: app.route('fof-masquerade', { username: this.user.slug() }),\n            icon: 'far fa-id-card',\n            'data-editProfile': edit,\n          },\n          app.translator.trans(`fof-masquerade.forum.buttons.${edit ? 'edit' : 'view'}-profile`)\n        ),\n        200\n      );\n    }\n  });\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport UserCard from 'flarum/forum/components/UserCard';\nimport TypeFactory from './types/TypeFactory';\n\nexport default function mutateUserHero() {\n  extend(UserCard.prototype, 'infoItems', function (items) {\n    const answers = app.forum.attribute('canViewMasquerade') ? this.attrs.user.bioFields() || [] : [];\n\n    items.add(\n      'masquerade-bio',\n      <div>\n        {answers.map((answer) => {\n          const field = answer.attribute('field');\n          const type = TypeFactory.typeForField({\n            field,\n            value: answer.content(),\n          });\n\n          return type.answerField();\n        })}\n      </div>\n    );\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Field","name","Model","description","type","validation","required","prefix","icon","sort","deleted_at","answer","on_bio","apiEndpoint","this","exists","data","id","Answer","content","fieldId","field","computed","app","userId","BaseField","set","readAttribute","object","attribute","validationRules","split","validationRule","ruleName","ruleContent","forEach","rule","editorField","class","m","editorInput","editorInputAttrs","className","oninput","event","target","answerField","iconName","hasAnswer","answerContent","keys","length","isNoOptionSelectedValue","BooleanField","options","map","option","checked","selected","onclick","label","push","translator","trans","indexOf","EmailField","attrs","placeholder","email","segment","replace","join","Button","mailTo","window","location","NO_OPTION_SELECTED_KEY","SelectField","Select","onchange","validationIn","UrlField","to","open","TypeFactory","typeForField","undefined","identify","types","fieldAttribute","boolean","select","url","identified","fieldType","trim","ProfilePane","answers","user","oninit","vnode","loading","load","view","b","find","masqueradeAnswers","include","then","redraw","Component","ProfileConfigurePane","enforceProfileCompletion","profileCompleted","profileNowCompleted","answerValues","dirty","onsubmit","update","bind","disabled","href","e","preventDefault","method","body","response","parseResponse","console","log","RootMasqueradePane","loadUser","route","param","pageContentComponent","canEditMasqueradeProfile","show","UserPage","store","models","User","path","resolver","onmatch","Error","extend","items","edit","add","LinkButton","username","slug","UserCard","bioFields","components"],"sourceRoot":""}