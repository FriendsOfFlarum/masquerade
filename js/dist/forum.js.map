{"version":3,"sources":["webpack://@fof/masquerade/webpack/bootstrap","webpack://@fof/masquerade/external \"flarum.core.compat['app']\"","webpack://@fof/masquerade/external \"flarum.core.compat['Model']\"","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/masquerade/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/masquerade/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/Button']\"","webpack://@fof/masquerade/external \"flarum.core.compat['extend']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/UserPage']\"","webpack://@fof/masquerade/./src/lib/models/Field.js","webpack://@fof/masquerade/external \"flarum.core.compat['components/Select']\"","webpack://@fof/masquerade/external \"flarum.core.compat['models/User']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/LinkButton']\"","webpack://@fof/masquerade/external \"flarum.core.compat['components/UserCard']\"","webpack://@fof/masquerade/./src/lib/models/Answer.js","webpack://@fof/masquerade/./src/forum/types/BaseField.js","webpack://@fof/masquerade/./src/forum/types/BooleanField.js","webpack://@fof/masquerade/./src/forum/types/EmailField.js","webpack://@fof/masquerade/./src/forum/types/SelectField.js","webpack://@fof/masquerade/./src/forum/types/UrlField.js","webpack://@fof/masquerade/./src/forum/types/TypeFactory.js","webpack://@fof/masquerade/./src/forum/panes/ProfileConfigurePane.js","webpack://@fof/masquerade/./src/forum/panes/ProfilePane.js","webpack://@fof/masquerade/./src/forum/mutateUserHero.js","webpack://@fof/masquerade/./src/forum/index.js","webpack://@fof/masquerade/./src/forum/addProfilePane.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","configurable","writable","_inheritsLoose","subClass","superClass","constructor","__proto__","Field","Model","attribute","transformDate","hasOne","apiEndpoint","this","exists","data","id","Answer","BaseField","field","set","readAttribute","validationRules","split","validationRule","ruleName","ruleContent","forEach","rule","editorField","icon","required","prefix","editorInput","description","editorInputAttrs","className","oninput","event","target","answerField","iconName","answerContent","isNoOptionSelectedValue","BooleanField","options","map","option","checked","selected","onclick","label","push","app","translator","trans","indexOf","EmailField","attrs","type","placeholder","email","segment","replace","join","Button","component","mailTo","window","location","Select","onchange","validationIn","UrlField","to","open","TypeFactory","typeForField","identify","types","fieldAttribute","boolean","select","SelectField","url","validation","identified","fieldType","trim","ProfileConfigurePane","oninit","vnode","loading","loadUser","session","user","username","enforceProfileCompletion","forum","profileCompleted","fields","answers","load","content","onsubmit","update","sort","a","b","answer","request","method","then","parseResponse","e","preventDefault","body","redraw","response","store","pushPayload","UserPage","route","param","userId","show","extend","UserCard","items","bioFields","add","initializers","models","User","hasMany","routes","path","ProfilePane","isOwnProfileAndCanHaveMasquerade","href","LinkButton","mutateUserHero"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/UserPage'];","import Model from 'flarum/Model';\n\nexport default class Field extends Model {\n    name = Model.attribute('name');\n    description = Model.attribute('description');\n    type = Model.attribute('type');\n    validation = Model.attribute('validation');\n    required = Model.attribute('required');\n    prefix = Model.attribute('prefix');\n    icon = Model.attribute('icon');\n    sort = Model.attribute('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    answer = Model.hasOne('answer');\n    on_bio = Model.attribute('on_bio');\n\n    apiEndpoint() {\n        return '/masquerade/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['models/User'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['components/UserCard'];","import Model from 'flarum/Model';\n\nexport default class Answer extends Model {\n    content = Model.attribute('content');\n    field = Model.hasOne('field');\n    userId = Model.attribute('user_id');\n\n    apiEndpoint() {\n        return '/masquerade/configure' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import icon from 'flarum/helpers/icon';\n\n/* global m */\n\nexport default class BaseField {\n    constructor({ field, set, value }) {\n        this.field = field;\n        this.set = set;\n        this.value = value;\n    }\n\n    readAttribute(object, attribute) {\n        if (typeof object[attribute] === 'function') {\n            return object[attribute]();\n        }\n\n        return object[attribute];\n    }\n\n    /**\n     * Gets all Laravel validation rules split by rule\n     * @returns {Array}\n     */\n    validationRules() {\n        return this.readAttribute(this.field, 'validation').split('|');\n    }\n\n    /**\n     * Gets a Laravel validation rule by name\n     * @param {string} ruleName\n     * @returns {string|null}\n     */\n    validationRule(ruleName) {\n        let ruleContent = null;\n\n        this.validationRules().forEach((rule) => {\n            const split = rule.split(':', 2);\n\n            if (split[0] === ruleName) {\n                ruleContent = split[1];\n            }\n        });\n\n        return ruleContent;\n    }\n\n    editorField() {\n        return m('fieldset.Field', [\n            m('legend', [this.field.icon() ? [icon(this.field.icon()), ' '] : null, this.field.name(), this.field.required() ? ' *' : null]),\n            m('.FormField', [\n                this.field.prefix() ? m('.prefix', this.field.prefix()) : null,\n                this.editorInput(),\n                this.field.description() ? m('.helpText', this.field.description()) : null,\n            ]),\n        ]);\n    }\n\n    editorInput() {\n        return m('input', this.editorInputAttrs());\n    }\n\n    editorInputAttrs() {\n        return {\n            className: 'FormControl',\n            oninput: (event) => {\n                this.set(event.target.value);\n            },\n            value: this.value,\n            required: this.field.required(),\n        };\n    }\n\n    answerField() {\n        const iconName = this.readAttribute(this.field, 'icon');\n\n        return m('.Masquerade-Bio-Set', [\n            m('span.Masquerade-Bio-Field', [iconName ? [icon(iconName), ' '] : null, this.readAttribute(this.field, 'name') + ': ']),\n            m('span.Masquerade-Bio-Answer', this.answerContent()),\n        ]);\n    }\n\n    answerContent() {\n        return this.value;\n    }\n\n    static isNoOptionSelectedValue(value) {\n        // The value can be null when coming from the API\n        // The value can be '' when the field does not exist on the user (the empty string is set in ProfileConfigurePane)\n        return value === null || value === '';\n    }\n}\n","import icon from 'flarum/helpers/icon';\nimport BaseField from './BaseField';\n\nexport default class BooleanField extends BaseField {\n    editorInput() {\n        return this.options().map((option) =>\n            m(\n                'div',\n                m('label', [\n                    m('input[type=radio]', {\n                        checked: option.selected(this.value),\n                        onclick: () => {\n                            this.set(option.key);\n                        },\n                    }),\n                    ' ' + option.label,\n                ])\n            )\n        );\n    }\n\n    options() {\n        let options = [];\n\n        if (!this.readAttribute(this.field, 'required')) {\n            options.push({\n                selected: (value) => BaseField.isNoOptionSelectedValue(value),\n                key: null,\n                label: app.translator.trans('fof-masquerade.forum.fields.select.none-optional'),\n            });\n        }\n\n        options.push({\n            selected: (value) => ['true', '1', 1, true, 'yes'].indexOf(value) !== -1,\n            key: 'true',\n            label: app.translator.trans('fof-masquerade.forum.fields.boolean.yes'),\n        });\n\n        options.push({\n            selected: (value) => ['false', '0', 0, false, 'no'].indexOf(value) !== -1,\n            key: 'false',\n            label: app.translator.trans('fof-masquerade.forum.fields.boolean.no'),\n        });\n\n        // This is probably overkill because it looks like the backend casts the value anyway\n        if (\n            !BaseField.isNoOptionSelectedValue(this.value) &&\n            ['true', '1', 1, true, 'yes', 'false', '0', 0, false, 'no'].indexOf(this.value) === -1\n        ) {\n            options.push({\n                selected: () => true,\n                key: this.value,\n                label: '(invalid) ' + this.value,\n            });\n        }\n\n        return options;\n    }\n\n    answerContent() {\n        if (BaseField.isNoOptionSelectedValue(this.value)) {\n            return '';\n        }\n\n        return [1, '1', true, 'true', 'yes'].indexOf(this.value) !== -1\n            ? [icon('far fa-check-square'), ' ', app.translator.trans('fof-masquerade.forum.fields.boolean.yes')]\n            : [icon('far fa-square'), ' ', app.translator.trans('fof-masquerade.forum.fields.boolean.no')];\n    }\n}\n","import Button from 'flarum/components/Button';\nimport BaseField from './BaseField';\n\nexport default class EmailField extends BaseField {\n    editorInputAttrs() {\n        let attrs = super.editorInputAttrs();\n\n        attrs.type = 'email';\n        attrs.placeholder = 'you@example.com';\n\n        return attrs;\n    }\n\n    answerContent() {\n        const value = this.value;\n\n        if (!value) {\n            return null;\n        }\n\n        const email = value\n            .split(/@|\\./)\n            .map((segment) => {\n                return segment.replace(/(.{2})./g, '$1*');\n            })\n            .join('*');\n\n        return Button.component(\n            {\n                onclick: () => this.mailTo(),\n                className: 'Button Button--text',\n                icon: 'far fa-envelope',\n            },\n            email\n        );\n    }\n\n    mailTo() {\n        window.location = 'mailto:' + this.value;\n    }\n}\n","import Select from 'flarum/components/Select';\nimport BaseField from './BaseField';\n\nconst NO_OPTION_SELECTED_KEY = 'fof_masquerade_no_option_selected';\n\nexport default class EmailField extends BaseField {\n    editorInput() {\n        return Select.component({\n            onchange: (value) => {\n                if (value === NO_OPTION_SELECTED_KEY) {\n                    value = null;\n                }\n\n                this.set(value);\n            },\n            value: BaseField.isNoOptionSelectedValue(this.value) ? NO_OPTION_SELECTED_KEY : this.value,\n            options: this.options(),\n        });\n    }\n\n    options() {\n        let options = {};\n\n        if (!this.readAttribute(this.field, 'required')) {\n            options[NO_OPTION_SELECTED_KEY] = app.translator.trans('fof-masquerade.forum.fields.select.none-optional');\n        } else if (BaseField.isNoOptionSelectedValue(this.value)) {\n            options[NO_OPTION_SELECTED_KEY] = app.translator.trans('fof-masquerade.forum.fields.select.none-required');\n        }\n\n        const validationIn = this.validationRule('in');\n\n        if (validationIn) {\n            validationIn.split(',').forEach((value) => {\n                options[value] = value;\n            });\n        }\n\n        if (!BaseField.isNoOptionSelectedValue(this.value) && typeof options[this.value] === 'undefined') {\n            options[this.value] = '(invalid) ' + this.value;\n        }\n\n        return options;\n    }\n}\n","import Button from 'flarum/components/Button';\nimport BaseField from './BaseField';\n\nexport default class UrlField extends BaseField {\n    editorInputAttrs() {\n        let attrs = super.editorInputAttrs();\n\n        attrs.type = 'url';\n        attrs.placeholder = 'https://example.com';\n\n        return attrs;\n    }\n\n    answerContent() {\n        const value = this.value;\n\n        if (!value) {\n            return null;\n        }\n\n        return Button.component(\n            {\n                onclick: () => this.to(),\n                className: 'Button Button--text',\n                icon: 'fas fa-link',\n            },\n            value.replace(/^https?:\\/\\//, '')\n        );\n    }\n\n    to() {\n        const popup = window.open();\n        popup.location = this.value;\n    }\n}\n","import BaseField from './BaseField';\nimport BooleanField from './BooleanField';\nimport EmailField from './EmailField';\nimport SelectField from './SelectField';\nimport UrlField from './UrlField';\n\nexport default class TypeFactory {\n    static typeForField({ field, set, value }) {\n        let className = BaseField;\n\n        const type = this.identify(field);\n\n        if (type) {\n            className = this.types()[type];\n        }\n\n        return new className({\n            field,\n            set,\n            value,\n        });\n    }\n\n    static fieldAttribute(field, attribute) {\n        if (typeof field[attribute] === 'function') {\n            return field[attribute]();\n        }\n\n        return field[attribute];\n    }\n\n    static types() {\n        return {\n            boolean: BooleanField,\n            email: EmailField,\n            select: SelectField,\n            url: UrlField,\n        };\n    }\n\n    /**\n     * Identifies how to parse the field answer.\n     * @returns {null|string}\n     */\n    static identify(field) {\n        const validation = (this.fieldAttribute(field, 'validation') || '').split(',');\n        let identified = null;\n\n        // If the field has a type we use it\n        const fieldType = this.fieldAttribute(field, 'type');\n        if (typeof this.types()[fieldType] !== 'undefined') {\n            return fieldType;\n        }\n\n        // If it's an advanced field with no type we then guess the best type\n        validation.forEach((rule) => {\n            rule = rule.trim();\n\n            if (typeof this.types()[rule] !== 'undefined') {\n                identified = rule;\n            }\n        });\n\n        return identified;\n    }\n}\n","import app from 'flarum/app';\nimport UserPage from 'flarum/components/UserPage';\nimport Button from 'flarum/components/Button';\nimport TypeFactory from './../types/TypeFactory';\n\n/* global m */\n\nexport default class ProfileConfigurePane extends UserPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n        this.loading = true;\n\n        this.loadUser(app.session.user.username());\n        this.enforceProfileCompletion = app.forum.attribute('masquerade.force-profile-completion') || false;\n        this.profileCompleted = app.forum.attribute('masquerade.profile-completed') || false;\n        this.fields = [];\n        this.answers = {};\n        this.load();\n    }\n\n    content() {\n        return m(\n            'form.ProfileConfigurePane',\n            {\n                onsubmit: this.update.bind(this),\n            },\n            [\n                this.enforceProfileCompletion && !this.profileCompleted\n                    ? m('.Alert.Alert--Error', app.translator.trans('fof-masquerade.forum.alerts.profile-completion-required'))\n                    : null,\n                m(\n                    '.Fields',\n                    this.fields\n                        .sort((a, b) => a.sort() - b.sort())\n                        .map((field) => {\n                            if (!this.answers.hasOwnProperty(field.id())) {\n                                this.answers[field.id()] = field.answer() ? field.answer().content() : '';\n                            }\n\n                            return this.field(field);\n                        })\n                ),\n                Button.component(\n                    {\n                        type: 'submit',\n                        className: 'Button Button--primary',\n                        loading: this.loading,\n                    },\n                    app.translator.trans('fof-masquerade.forum.buttons.save-profile')\n                ),\n            ]\n        );\n    }\n\n    field(field) {\n        const type = TypeFactory.typeForField({\n            field,\n            set: this.set.bind(this, field),\n            value: this.answers[field.id()],\n        });\n\n        return type.editorField();\n    }\n\n    load() {\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/masquerade/configure',\n        }).then(this.parseResponse.bind(this));\n    }\n\n    set(field, value) {\n        this.answers[field.id()] = value;\n    }\n\n    update(e) {\n        e.preventDefault();\n\n        this.loading = true;\n\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + '/masquerade/configure',\n            body: this.answers,\n        })\n            .then(this.parseResponse.bind(this))\n            .catch(() => {\n                this.loading = false;\n                m.redraw();\n            });\n    }\n\n    parseResponse(response) {\n        this.fields = app.store.pushPayload(response);\n        this.loading = false;\n        m.redraw();\n    }\n}\n","import UserPage from 'flarum/components/UserPage';\nimport TypeFactory from './../types/TypeFactory';\n\n/* global m */\n\nexport default class ProfileConfigurePane extends UserPage {\n    oninit(vnode) {\n        super.oninit(vnode);\n        this.loading = true;\n\n        this.fields = [];\n        this.answers = {};\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        return m('.Masquerade-Bio', [\n            m(\n                '.Fields',\n                this.fields\n                    .sort((a, b) => a.sort() - b.sort())\n                    .map((field) => {\n                        // UserID check must be done with == because userId() is number while id() is string\n                        this.answers[field.id()] = field.answer() && field.answer().userId() == this.user.id() ? field.answer().content() : null;\n\n                        return this.field(field);\n                    })\n            ),\n        ]);\n    }\n\n    field(field) {\n        const type = TypeFactory.typeForField({\n            field,\n            value: this.answers[field.id()],\n        });\n\n        return type.answerField();\n    }\n\n    load(user) {\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/masquerade/profile/' + user.id(),\n        }).then(this.parseResponse.bind(this));\n    }\n\n    show(user) {\n        this.load(user);\n\n        super.show(user);\n    }\n\n    parseResponse(response) {\n        this.answers = {};\n        this.fields = app.store.pushPayload(response);\n\n        this.loading = false;\n        m.redraw();\n    }\n}\n","import { extend } from 'flarum/extend';\nimport UserCard from 'flarum/components/UserCard';\nimport TypeFactory from './types/TypeFactory';\n\nexport default function () {\n    extend(UserCard.prototype, 'infoItems', function (items) {\n        let answers = app.forum.attribute('canViewMasquerade') ? this.attrs.user.bioFields() || [] : [];\n\n        items.add(\n            'masquerade-bio',\n            m(\n                'div',\n                answers.map((answer) => {\n                    const field = answer.attribute('field');\n                    const type = TypeFactory.typeForField({\n                        field,\n                        value: answer.content(),\n                    });\n\n                    return type.answerField();\n                })\n            )\n        );\n    });\n}\n","import app from 'flarum/app';\nimport User from 'flarum/models/User';\nimport Field from './../lib/models/Field';\nimport Answer from './../lib/models/Answer';\nimport Model from 'flarum/Model';\n\nimport addProfilePane from './addProfilePane';\nimport mutateUserHero from './mutateUserHero';\n\napp.initializers.add('fof-masquerade', (app) => {\n    app.store.models['masquerade-field'] = Field;\n    app.store.models['masquerade-answer'] = Answer;\n\n    User.prototype.bioFields = Model.hasMany('bioFields');\n\n    addProfilePane();\n\n    mutateUserHero();\n});\n","import { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport LinkButton from 'flarum/components/LinkButton';\nimport UserPage from 'flarum/components/UserPage';\nimport ProfileConfigurePane from './panes/ProfileConfigurePane';\nimport ProfilePane from './panes/ProfilePane';\n\nexport default function () {\n    // The configure route must be registered first because otherwise there's a conflict between the two routes\n    app.routes['fof-masquerade-configure-profile'] = {\n        path: '/masquerade/configure',\n        component: ProfileConfigurePane,\n    };\n    app.routes['fof-masquerade-view-profile'] = {\n        path: '/masquerade/:username',\n        component: ProfilePane,\n    };\n\n    extend(UserPage.prototype, 'navItems', function (items) {\n        const isOwnProfileAndCanHaveMasquerade = app.forum.attribute('canHaveMasquerade') && app.session.user.id() === this.user.id();\n\n        if (app.forum.attribute('canViewMasquerade') || isOwnProfileAndCanHaveMasquerade) {\n            const href = isOwnProfileAndCanHaveMasquerade\n                ? app.route('fof-masquerade-configure-profile')\n                : app.route('fof-masquerade-view-profile', { username: this.user.username() });\n            items.add(\n                'masquerade',\n                LinkButton.component(\n                    {\n                        href,\n                        icon: 'far fa-id-card',\n                    },\n                    app.translator.trans('fof-masquerade.forum.buttons.view-profile')\n                ),\n                200\n            );\n        }\n    });\n}\n"],"sourceRoot":""}